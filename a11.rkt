#lang racket
(require "mk.rkt")

;;;;;;;;;;;;;;;Discussed with Debasis Dwivedy;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define apply-Go
 (lambda (G e t)
  (fresh (a G^)
   (== `(,a . ,G^) G)
   (fresh (aa da)
    (== `(,aa . ,da) a)
    (conde
     ((== aa e) (== da t))
     ((=/= aa e) (apply-Go G^ e t)))))))

(define !-
 (lambda (G e t)
  (conde
   ((numbero e) (== 'Nat t))
   ((== t 'Bool)
    (conde
     ((== #t e))
     ((== #f e))))
     ((fresh (e1)
       (== `(not ,e1) e)
       (== 'Bool t)
       (!- G e1 'Bool)))
     ((fresh (e1)
       (== `(zero? ,e1) e)
       (== 'Bool t)
       (!- G e1 'Nat)))
     ((fresh (e1)
       (== `(sub1 ,e1) e)
       (== 'Nat t)
       (!- G e1 'Nat)))
     ((fresh (ne1 ne2)
       (== `(+ ,ne1 ,ne2) e)
       (== 'Nat t)
       (!- G ne1 'Nat)
       (!- G ne2 'Nat)))
     ((fresh (ne1 ne2)
       (== `(* ,ne1 ,ne2) e)
       (== 'Nat t)
       (!- G ne1 'Nat)
       (!- G ne2 'Nat)))
     ((fresh (teste anse elsee)
       (== `(if ,teste ,anse ,elsee) e)
       (!- G teste 'Bool)
       (!- G anse t)
       (!- G elsee t)))
     ((symbolo e) (apply-Go G e t))
     ((fresh (x b)
       (== `(lambda (,x) ,b) e)
       (symbolo x)
       (fresh (tx tb)          
        (== `(,tx -> ,tb) t)
        (!- `((,x . ,tx) . ,G) b tb))))
     ((fresh (e1 arg)
       (== `(,e1 ,arg) e)
       (fresh (targ)
        (!- G e1 `(,targ -> ,t))
        (!- G arg targ))))
     ((fresh (x b)
       (== `(fix (lambda (,x) ,b)) e)
       (symbolo x)
       (!- `((,x . ,t) . ,G) b t)))
     ((fresh (e1 e2 t1 t2)
       (== `(cons ,e1 ,e2) e)
       (!- G e1 t1)
       (!- G e2 t2)
       (== `(pairof ,t1 ,t2) t)))
     ((fresh (lis)
       (== `(car ,lis) e)
       (fresh (t2)
        (!- G lis `(pairof ,t ,t2)))))
     ((fresh (lis)
       (== `(cdr ,lis) e)
       (fresh (t2)
        (!- G lis `(pairof ,t2 ,t))))))))